# Helper functions
a(){ alias "$1"="$2" }
_ualias() { unalias "$1" 2>/dev/null }
f() {
  _ualias "$1"
  eval "$1() { $2; }" 
}

# One-char alias
# Package management
a p 'pacman'
a y 'yay'
a g "git clone --depth 1 https://github.com/$1/$2.git"
a n 'nvim'

# Git log
a gll 'git fetch origin && git log --all --graph --oneline'
a glc 'git commit -m'

# Worktree `gw`
a gwc 'git worktree add'
a gwr 'git worktree list'
a gwd 'git worktree remove'

# Git tracking management `gt
a gtc 'git add' 
a gtd 'git rm --cached -r'

# Git staging management `gs`
a gsc 'git add'
a gsd 'git restore --staged'
a gsr 'git status --short'
a gsd 'git restore --staged'

# Git repository synchronization `gsy`
a gp 'git pull'
# a dlgit 'function _clone(){git clone git@github.com:$1/$2.git} _clone'
a gd 'git diff'
a gb 'git branch'
a gba 'git branch -a'
a gw 'git switch'
a gwm 'git switch main'
a gcob 'git checkout -b'

# GitHub Issues `gi`
a gic 'gh issue create'
f gir 'gh issue view "$1" --comments'
a gil 'gh issue list --limit 1000' # READ
a giu 'gh issue edit' # UPDATE
a gid 'gh issue close' # DELETE

a gif 'gh issue list | grep $1'
## Comment
a gim 'gh issue comment'

# GitHub Pull Requests `gp`
a gpc 'gh pr create'
a gpl 'gh pr list --limit 1000 | bat'
a ppv 'gh pr view'
a gpe 'gh pr edit'
a gpd 'gh pr close'

## Comment
a gpm 'gh pr comment'

# GitHub Comments `gm`
a gce 'gh comment edit'
# a gcd 'gh comment ' 

# GitHub Actions `gha`

# GitHub plugins `ge`
a gei 'gh extension install'
a gel 'gh extension list'
a ged 'gh extension remove'

alias newrepo='git init && git add . && git commit -m "Initial commit" && gh repo create $(basename $(pwd)) --private --confirm && git branch -M main && git remote add origin https://github.com/$(gh auth status --json login -q ".user.login")/$(basename $(pwd)).git && git push -u origin main'

# Shell
a l 'ls -ahli --color=auto'

## Docker
a de 'docker exec'
a dl 'docker logs'
a dp 'docker ps'

## Python
a pv 'python3 -m venv'
a py 'python3'
a pi 'pi'
a pc 'pip config'
a ipy 'ipython'

## Node.js
a nc 'npm config'
a ni 'npm install'

# Waybar
a nb "nvim $HOME/.config/waybar/config"
a nbs "nvim $HOME/.config/waybar/style.css"
a rb "killall waybar && waybar >/dev/null 2>&1 &"
# Zsh config files
a nze "nvim $HOME/.zshenv"
a nzr "nvim $HOME/.zshrc"
a nzp "nvim $HOME/.zprofile"
a na "nvim $HOME/.aliases/aliases_dotfiles"

a rze "source $HOME/.zshenv && source $HOME/.zshrc && source $HOME/.profile"

# Hyprland
a nh "nvim $HOME/.config/hypr/hyprland.conf"
a nhp "nvim $HOME/.config/hypr/hyprpaper.conf"
a rh "hyprctl reload"

# Terminal
a ni "nvim $HOME/.config/alacritty/alacritty.toml"
a nk "nvim $HOME/.p10k.zsh"
a np "nvim $HOME/dotfiles/PKG_PACMAN.txt"
a nq "nvim $HOME/.config/qutebrowser/config.py"
a nr "nvim $HOME/dotfiles/PKG_GH.txt"
a ns "nvim $HOME"
a nt "nvim $HOME/.tmux.conf"
a nu "nvim $HOME"
a nx "nvim $HOME/.config/espanso/match/base.yml"
a rx "espanso restart"
a ny "nvim $HOME/dotfiles/PKG_AUR.txt"

# Neovim
a nn "nvim $HOME/.config/nvim/init.lua"


# Reload
a ra "source $HOME/.zshrc"

# Read the execution log
a rc "source $HOME/.zshrc"
a re "source $HOME/dotfiles/ZSH_ENV"
a rgr "command rg" 
a rh "hyprctl reload"
a nlr='command nl'
a rz "source $HOME/.zshrc"

## GUI apps
a chromium 'OZONE_PLATFORM=wayland chromium &'
a obsidian 'OZONE_PLATFORM=wayland obsidian &'
a cursor 'OZONE_PLATFORM=wayland cursor &'
